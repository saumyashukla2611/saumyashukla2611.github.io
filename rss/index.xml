<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[Untitled RSS Feed]]></description><link>https://saumyashukla2611.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 25 Feb 2018 03:08:31 GMT</lastBuildDate><atom:link href="https://saumyashukla2611.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[RShiny Application in R]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>RShiny is a package from RStudio to build interactive web applications in <em>R</em>. With interactive here means that one can change the input values on the web page and can view the output generated with that input on the web page at the same instance. There is no need to reload the web page for changes to appear. This package completely eliminates the need to use HTML,CSS,Javascript for building a web application.</p>
</div>
<div class="paragraph">
<p>shinyApp consists of two components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ui.r file</p>
</li>
<li>
<p>server.r file</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_ui_r_file">ui.r file</h4>
<div class="paragraph">
<p>This file contains the user interface object. You can define the
inputs for the web application in this file. Following are the basic components for this file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R">library(shiny)
shinyUI(fluidpage())</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above code, the first line loads the shiny library. The <code>ShinyUI()</code> function builds the UI object for the web application. In shiny, you can have function inside a function. Inside <code>ShinyUI()</code> function, you can have various functions for laying out the user interface.</p>
</div>
<div class="paragraph">
<p>I am also using <code>fluidpage()</code> function as a parameter for <code>ShinyUI()</code> to create a fluid layout which we will see in the below sections.</p>
</div>
<div class="paragraph">
<p>If you want to see other functions, feel free to use the below link : <a href="https://shiny.rstudio.com/reference/shiny/1.0.5/" class="bare">https://shiny.rstudio.com/reference/shiny/1.0.5/</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R"># filename: ui.r

library(shiny)
shinyUI(fluidPage(

  titlePanel("Hello, Welcome to a Rshiny Web Application!!"),

  # sliderInput
  # builds a slider in the sidebar
  # @param "obs" input variable name
  # @param "Number of observations:" Slider title
  # @param min = 1 min slider value
  # @param max = 100 max slider value
  # @param value = 500 By default selected value
  sidebarLayout(
    sidebarPanel(
      sliderInput("obs", "Number of observations:",
                  min = 1, max = 1000, value = 500)
    ),

    mainPanel(
      plotOutput("distPlot")
      # to print the plot's output where
      # output variable is distPlot.
    )
  )
))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Inside <code>fluidPage()</code> function, you can see three components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>titlePanel</p>
</li>
<li>
<p>sidebarLayout</p>
</li>
<li>
<p>mainPanel</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>1) <code>titlePanel</code> includes the title of the webpage.</p>
</div>
<div class="paragraph">
<p>2) <code>sidebarPanel</code> includes the components on the sidebar. By default, sidebar is on the left-hand side, but you can move it towards the right with the help of the following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R">sidebarLayout(position = "right",
  sidebarPanel(
  ),
  mainPanel(
  )
)</code></pre>
</div>
</div>
<div class="paragraph">
<p>3) <code>mainPanel</code> includes the center section of the webpage where we can print/display our output.</p>
</div>
</div>
<div class="sect3">
<h4 id="_server_r_file">server.r file</h4>
<div class="paragraph">
<p><code>server.r</code> is the file that is responsible for the computational part of the RShiny App.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R"># filename: server.r

library(sshiny)
shinyServer(function(input,output) {

})</code></pre>
</div>
</div>
<div class="paragraph">
<p>The above code contains the basic component for the <code>server.r</code> file. You can define the output to be generated inside this <code>shinyServer()</code> function. I am going to plot a histogram for randomly generated numbers using <code>rnorm()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R"># filename: server.r

library(shiny)
shinyServer(function(input,output) {
  output$distPlot &lt;- renderPlot({
    dist &lt;- rnorm(input$obs)
    hist(dist)
  })
})</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>render</code> is a family of functions which are reactive in nature. This means that the output changes with the change in input. In order to plot a graph, we will use the function <code>renderPlot()</code>.</p>
</div>
<div class="paragraph">
<p>You can find the other <code>render</code> functions using the following link: <a href="https://shiny.rstudio.com/reference/shiny/1.0.5/" class="bare">https://shiny.rstudio.com/reference/shiny/1.0.5/</a></p>
</div>
<div class="paragraph">
<p>The histogram generated by the above code is as follows:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/rshiny.JPG" alt="rshiny.JPG">
</div>
</div>
<div class="paragraph">
<p>You can view the working of the web application from the following video:</p>
</div>
<div class="videoblock">
<div class="content">
<video src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/rshiny.mp4" controls>
Your browser does not support the video tag.
</video>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_app_r">App.r</h4>
<div class="paragraph">
<p>So prior to RShiny version 0.10, there was a need to call <code>shinyUI()</code> and <code>shinyServer()</code> functions in <code>ui.r</code> and <code>server.r</code> files respectively. But from RShiny version 0.10, there is no more need to call these functions seperately in two different files. We can use a single file,<code>App.r</code> to perform both the operation inside a single function called <code>shinyApp()</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-R" data-lang="R"># filename: App.r

server &lt;- function(input, output) {

}

ui &lt;- fluidPage(
  sidebarLayout(
    sidebarPanel(),
    mainPanel()
    )
)
shinyApp(ui = ui, server = server)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>server</code> and <code>ui</code> will work the same as described in the start of this blog. <code>shinyApp()</code> knits the <code>ui</code> and <code>server</code> functions together.</p>
</div>
</div>
<div class="sect1">
<h2 id="_references">References</h2>
<div class="sectionbody">
<div class="paragraph">
<p>[1] <a href="https://shiny.rstudio.com/reference/shiny/1.0.5/" class="bare">https://shiny.rstudio.com/reference/shiny/1.0.5/</a></p>
</div>
<div class="paragraph">
<p>[2] <a href="https://shiny.rstudio.com/articles/app-formats.html" class="bare">https://shiny.rstudio.com/articles/app-formats.html</a></p>
</div>
</div>
</div>]]></description><link>https://saumyashukla2611.github.io/2018/02/24/R-Siny-Application-in-R.html</link><guid isPermaLink="true">https://saumyashukla2611.github.io/2018/02/24/R-Siny-Application-in-R.html</guid><category><![CDATA[Rshiny]]></category><pubDate>Sat, 24 Feb 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Exploring Magick Package in R]]></title><description><![CDATA[<div class="paragraph">
<p>Looking for image transformations and changes in R? Here is your package.</p>
</div>
<div class="paragraph">
<p>While reading about various packages in R, I came across this super fun package called as magick. It was published in December 2017 with version 1.6 and is a very comprehensive open source image processing library. The package supports various file formats and handlings. Well, the use of this package depends upon the user but I am planning to implement this in my Rshiny application.</p>
</div>
<div class="paragraph">
<p>To Install and load the package in R:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>install.packages("magick", repos = "http://cran.us.r-project.org/bin/windows/contrib/3.3/magick_1.6.zip")
library(magick)</pre>
</div>
</div>
<div class="paragraph">
<p>I have a set a working directory, where I have saved all the images I am going to use for this demo. You can easily set it inside R studio: Session &#8594; Set Working Directory. After this, there is no need of giving absolute path.</p>
</div>
<div class="paragraph">
<p>To load the image file</p>
</div>
<div class="listingblock">
<div class="content">
<pre>tj &lt;- image_read('tj.jpg')
image_info(tj)
##   format width height colorspace matte filesize
## 1   JPEG   480    360       sRGB FALSE    26673</pre>
</div>
</div>
<div class="paragraph">
<p>You can use image_display to see the image but its only available to preview the image in an X11 window.</p>
</div>
<div class="paragraph">
<p>There are many transformation options available with this package which makes your task easier of not using another tool to crop, modify, scale or even change coloring in the image. I have taken image examples from my favorite childhood cartoon series, Recess..lol.. lets see the transformation options.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>p1 &lt;- image_read("tj.jpg")
print(p1)
##   format width height colorspace matte filesize
## 1   JPEG   480    360       sRGB FALSE    26673</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/1.PNG" alt="1.PNG">
</div>
</div>
<div class="paragraph">
<p>Well, I think TJ would look smarter with the border around the image.. what say?</p>
</div>
<div class="listingblock">
<div class="content">
<pre>image_border(image_background(tj, "orange"), "#FFA500", "10x10")</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/2.PNG" alt="2.PNG">
</div>
</div>
<div class="paragraph">
<p>Use can include any color with the color code, also it provides flexibility to change border dimensions.</p>
</div>
<div class="paragraph">
<p>Well, how about some text in the image? I can generate my own memes in R you see..</p>
</div>
<div class="listingblock">
<div class="content">
<pre>image_annotate(tj, "WHY ME??", size = 40, color = "ORANGE", boxcolor = "BLACK",
degrees = 40, location = "+22+20")</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/3.PNG" alt="3.PNG">
</div>
</div>
<div class="paragraph">
<p>You can change the degrees upto which you want to rotate the image of the text, the positioning of the text could be changed. +22 refers from the left end side position and +20 from the right hand side.</p>
</div>
<div class="paragraph">
<p>Well, hey Spinelli, why so blurrrr?</p>
</div>
<div class="listingblock">
<div class="content">
<pre>p2 &lt;- image_read("spinelli.jpg")
image_blur(p2,10,5)</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/4.PNG" alt="4.PNG">
</div>
</div>
<div class="paragraph">
<p>Here, 10 represents radius and 5 represents sigma value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>p3 &lt;- image_read("recess_gus.jpg")
image_charcoal(p3)</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/5.PNG" alt="5.PNG">
</div>
</div>
<div class="paragraph">
<p>There many other options available, you can check it out from the link provided in the reference section.</p>
</div>
<div class="paragraph">
<p>We can use animations as well, since all functions in magick supports working with layers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>p4 &lt;- image_read("Mikey.gif") %&gt;%
  image_scale("300x") %&gt;%
  image_quantize(256)
print(p4)
##   format width height colorspace matte filesize
## 1    GIF   300    220       sRGB  TRUE        0
## 2    GIF   300    220       sRGB  TRUE        0
## 3    GIF   300    221       sRGB  TRUE        0
## 4    GIF   300    220       sRGB  TRUE        0
## 5    GIF   300    223       sRGB  TRUE        0</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/6.gif" alt="6.gif">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>image_flip(p4)</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/7.gif" alt="7.gif">
</div>
</div>
<div class="paragraph">
<p>%&gt;% denotes piping in R</p>
</div>
<div class="paragraph">
<p>You can also morph the images:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>p5 &lt;- image_scale(image_read("vincent.jpg"), "x100")
p6 &lt;- image_scale(image_read("gretchen.jpg"), "x100")
frame &lt;- image_morph(c(p5, p6), frames = 10)
image_animate(frame)</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/8.gif" alt="8.gif">
</div>
</div>
<div class="paragraph">
<p>fun..right??</p>
</div>
<div class="listingblock">
<div class="content">
<pre>library(datasets)
library(ggplot2)
library(grid)
data("AirPassengers")
plot(AirPassengers, ylab="Passengers(1000s)", type="o", pch =20)
grid.raster(tj,just = "bottom" , height = 0.4)</pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="https://raw.githubusercontent.com/saumyashukla2611/saumyashukla2611.github.io/master/images/9.png" alt="9.png">
</div>
</div>
<div class="paragraph">
<p>References:</p>
</div>
<div class="paragraph">
<p><a href="https://cran.r-project.org/web/packages/magick/vignettes/intro.html" class="bare">https://cran.r-project.org/web/packages/magick/vignettes/intro.html</a></p>
</div>]]></description><link>https://saumyashukla2611.github.io/2018/02/22/Exploring-Magick-Package-in-R.html</link><guid isPermaLink="true">https://saumyashukla2611.github.io/2018/02/22/Exploring-Magick-Package-in-R.html</guid><category><![CDATA[magick]]></category><pubDate>Thu, 22 Feb 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Contact List using just CSS]]></title><description><![CDATA[<div class="paragraph">
<p>HTML/CSS seems to be easy languages but when you start drowning in its Deep Ocean, precision and accuracy are the lifeguards. With this simple code pen, I have learned many lessons. This article is based on one of the most simple but effective property, position: sticky.</p>
</div>
<p data-height="265" data-theme-id="0" data-slug-hash="eVJrGa" data-default-tab="css,result" data-user="GirlWhoCodes26" data-embed-version="2" data-pen-title="eVJrGa" class="codepen">See the Pen <a href="https://codepen.io/GirlWhoCodes26/pen/eVJrGa/">eVJrGa</a> by Saumya Shukla (<a href="https://codepen.io/GirlWhoCodes26">@GirlWhoCodes26</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<div class="paragraph">
<p>position:sticky; lets you stick the element on the screen. The most common example is sticky header where on scroll, the position of the header is intact and we can view the scrolled content on the page.</p>
</div>
<div class="paragraph">
<p>The Demo presented here uses the same concept. I am replicating a contact list view that sticks the alphabet header onto the top using position:sticky;</p>
</div>]]></description><link>https://saumyashukla2611.github.io/2018/02/03/Contact-List-using-just-CSS.html</link><guid isPermaLink="true">https://saumyashukla2611.github.io/2018/02/03/Contact-List-using-just-CSS.html</guid><category><![CDATA[HubPress]]></category><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><pubDate>Sat, 03 Feb 2018 00:00:00 GMT</pubDate></item></channel></rss>